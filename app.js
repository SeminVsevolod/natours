const express = require('express');
const fs = require('fs');
const app = express();
const morgan = require('morgan');

/**
 * +-----------------+
 * | 1) MIDDLEWARES  |
 * +-----------------+
 */

app.use(morgan('dev'));

/**
 * –î–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ req.body –≤ –≤–∏–¥–µ JSON
 */
app.use(express.json());

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
 */
app.use((req, res, next) => {
  console.log('Hello from the middleware ü§ù');
  next();
});

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –≤ requestTime
 */
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
 */
const tours = JSON.parse(
  fs.readFileSync(`${__dirname}/dev-data/data/tours-simple.json`)
);

/**
 * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
 */
const users = JSON.parse(
  fs.readFileSync(`${__dirname}/dev-data/data/users.json`)
);

/**
 * +--------------------+
 * | 2) ROUTE HANDLERS  |
 * +--------------------+
 */

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤
 */
const getAllTours = (req, res) => {
  console.log('getAllTours requestTime', req.requestTime);
  res.status(200).json({
    status: 'success',
    requestedAt: req.requestTime,
    results: tours.length,
    data: {
      tours,
    },
  });
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä –ø–æ id
 */
const getTour = (req, res) => {
  console.log(req.params);
  const id = req.params.id * 1;
  const tour = tours.find((el) => el.id === id);

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!tour) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
};

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä
 */
const createTour = (req, res) => {
  const newId = tours[tours.length - 1].id + 1;
  const newTour = Object.assign({ id: newId }, req.body);

  tours.push(newTour);

  /**
   * –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–º JSON —Ñ–∞–π–ª —Å —Ç—É—Ä–∞–º–∏ (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ë–î)
   */
  fs.writeFile(
    `${__dirname}/dev-data/data/tours-simple.json`,
    JSON.stringify(tours),
    (err) => {
      /**
       * –°—Ç–∞—Ç—É—Å 201 –æ–∑–Ω. "—Ä–µ—Å—É—Ä—Å —Å–æ–∑–¥–∞–Ω"
       */
      res.status(201).json({
        status: 'success',
        data: {
          tour: newTour,
        },
      });
    }
  );
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É—Ä
 */
const updateTour = (req, res) => {
  const id = req.params.id * 1;
  const tour = tours.find((el) => el.id === id);

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!tour) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      tour: '<Updated tour here>',
    },
  });
};

/**
 * –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—É—Ä
 */
const deleteTour = (req, res) => {
  console.log(req.params);
  const id = req.params.id * 1;
  const tour = tours.find((el) => el.id === id);

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!tour) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(204).json({
    status: 'success',
    data: null,
  });
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
const getAllUsers = (req, res) => {
  console.log('getAllUsers requestTime', req.requestTime);
  res.status(200).json({
    status: 'success',
    requestedAt: req.requestTime,
    results: users.length,
    data: {
      users,
    },
  });
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
 */
const getUser = (req, res) => {
  const id = req.params.id;
  const user = users.find((el) => {
    return el._id === id;
  });

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!user) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      user,
    },
  });
};

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const createUser = (req, res) => {
  const newId = users[users.length - 1].id + 1;
  const newUser = Object.assign({ _id: newId }, req.body);

  users.push(newUser);

  /**
   * –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–º JSON —Ñ–∞–π–ª —Å —Ç—É—Ä–∞–º–∏ (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –ë–î)
   */
  fs.writeFile(
    `${__dirname}/dev-data/data/users.json`,
    JSON.stringify(users),
    (err) => {
      /**
       * –°—Ç–∞—Ç—É—Å 201 –æ–∑–Ω. "—Ä–µ—Å—É—Ä—Å —Å–æ–∑–¥–∞–Ω"
       */
      res.status(201).json({
        status: 'success',
        data: {
          users: newUser,
        },
      });
    }
  );
};

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const updateUser = (req, res) => {
  const id = req.params.id;
  const user = users.find((el) => el._id === id);

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!user) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(200).json({
    status: 'success',
    data: {
      user: '<Updated user here>',
    },
  });
};

/**
 * –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const deleteUser = (req, res) => {
  console.log(req.params);
  const id = req.params.id;
  const user = users.find((el) => el._id === id);

  // –ï—Å–ª–∏ —Ç—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–≤–µ—Ç–∏—Ç—å 404 —Å –æ—à–∏–±–∫–æ–π
  if (!user) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }

  res.status(204).json({
    status: 'success',
    data: null,
  });
};

/**
 * +------------+
 * | 3) ROUTES  |
 * +------------+
 */
app.route('/api/v1/tours').get(getAllTours).post(createTour);
app
  .route('/api/v1/tours/:id')
  .get(getTour)
  .patch(updateTour)
  .delete(deleteTour);

app.route('/api/v1/users').get(getAllUsers).post(createUser);
app
  .route('/api/v1/users/:id')
  .get(getUser)
  .patch(updateUser)
  .delete(deleteUser);

/**
 * +------------------+
 * | 4) START SERVER  |
 * +------------------+
 */
const port = 3000;
app.listen(port, () => {
  console.log(`App running on port ${port}...`);
});
